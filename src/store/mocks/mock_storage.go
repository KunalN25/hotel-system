// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	constants "hotel-system/src/constants"
	store "hotel-system/src/store"
	hotelsystem "hotel-system/src/types/hotelsystem"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// AddHotel mocks base method.
func (m *MockStorageService) AddHotel(addHotelRequest hotelsystem.AddHotelRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHotel", addHotelRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHotel indicates an expected call of AddHotel.
func (mr *MockStorageServiceMockRecorder) AddHotel(addHotelRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHotel", reflect.TypeOf((*MockStorageService)(nil).AddHotel), addHotelRequest)
}

// AddUser mocks base method.
func (m *MockStorageService) AddUser(user *store.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageServiceMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorageService)(nil).AddUser), user)
}

// BeginTransaction mocks base method.
func (m *MockStorageService) BeginTransaction(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockStorageServiceMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockStorageService)(nil).BeginTransaction), ctx)
}

// CreateBooking mocks base method.
func (m *MockStorageService) CreateBooking(booking *store.Booking) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", booking)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockStorageServiceMockRecorder) CreateBooking(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockStorageService)(nil).CreateBooking), booking)
}

// CreateBookingTx mocks base method.
func (m *MockStorageService) CreateBookingTx(tx *sql.Tx, booking *store.Booking) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookingTx", tx, booking)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookingTx indicates an expected call of CreateBookingTx.
func (mr *MockStorageServiceMockRecorder) CreateBookingTx(tx, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookingTx", reflect.TypeOf((*MockStorageService)(nil).CreateBookingTx), tx, booking)
}

// CreateIdempotencyKey mocks base method.
func (m *MockStorageService) CreateIdempotencyKey(ik *store.IdempotencyKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdempotencyKey", ik)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdempotencyKey indicates an expected call of CreateIdempotencyKey.
func (mr *MockStorageServiceMockRecorder) CreateIdempotencyKey(ik interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdempotencyKey", reflect.TypeOf((*MockStorageService)(nil).CreateIdempotencyKey), ik)
}

// CreatePayment mocks base method.
func (m *MockStorageService) CreatePayment(payment *store.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStorageServiceMockRecorder) CreatePayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStorageService)(nil).CreatePayment), payment)
}

// DecrementHotelRoomsTx mocks base method.
func (m *MockStorageService) DecrementHotelRoomsTx(tx *sql.Tx, hotelId int64, numRooms int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementHotelRoomsTx", tx, hotelId, numRooms)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementHotelRoomsTx indicates an expected call of DecrementHotelRoomsTx.
func (mr *MockStorageServiceMockRecorder) DecrementHotelRoomsTx(tx, hotelId, numRooms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementHotelRoomsTx", reflect.TypeOf((*MockStorageService)(nil).DecrementHotelRoomsTx), tx, hotelId, numRooms)
}

// GetBookingById mocks base method.
func (m *MockStorageService) GetBookingById(bookingId int64) (store.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingById", bookingId)
	ret0, _ := ret[0].(store.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingById indicates an expected call of GetBookingById.
func (mr *MockStorageServiceMockRecorder) GetBookingById(bookingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingById", reflect.TypeOf((*MockStorageService)(nil).GetBookingById), bookingId)
}

// GetBookingByIdTx mocks base method.
func (m *MockStorageService) GetBookingByIdTx(tx *sql.Tx, bookingId int64) (store.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByIdTx", tx, bookingId)
	ret0, _ := ret[0].(store.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByIdTx indicates an expected call of GetBookingByIdTx.
func (mr *MockStorageServiceMockRecorder) GetBookingByIdTx(tx, bookingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByIdTx", reflect.TypeOf((*MockStorageService)(nil).GetBookingByIdTx), tx, bookingId)
}

// GetCompletedBookings mocks base method.
func (m *MockStorageService) GetCompletedBookings() ([]*store.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedBookings")
	ret0, _ := ret[0].([]*store.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedBookings indicates an expected call of GetCompletedBookings.
func (mr *MockStorageServiceMockRecorder) GetCompletedBookings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedBookings", reflect.TypeOf((*MockStorageService)(nil).GetCompletedBookings))
}

// GetExpiredBookings mocks base method.
func (m *MockStorageService) GetExpiredBookings() ([]*store.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredBookings")
	ret0, _ := ret[0].([]*store.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredBookings indicates an expected call of GetExpiredBookings.
func (mr *MockStorageServiceMockRecorder) GetExpiredBookings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredBookings", reflect.TypeOf((*MockStorageService)(nil).GetExpiredBookings))
}

// GetHotelById mocks base method.
func (m *MockStorageService) GetHotelById(id int64) (store.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelById", id)
	ret0, _ := ret[0].(store.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelById indicates an expected call of GetHotelById.
func (mr *MockStorageServiceMockRecorder) GetHotelById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelById", reflect.TypeOf((*MockStorageService)(nil).GetHotelById), id)
}

// GetHotelByIdTx mocks base method.
func (m *MockStorageService) GetHotelByIdTx(tx *sql.Tx, hotelId int64) (store.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelByIdTx", tx, hotelId)
	ret0, _ := ret[0].(store.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelByIdTx indicates an expected call of GetHotelByIdTx.
func (mr *MockStorageServiceMockRecorder) GetHotelByIdTx(tx, hotelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelByIdTx", reflect.TypeOf((*MockStorageService)(nil).GetHotelByIdTx), tx, hotelId)
}

// GetHotelForUpdate mocks base method.
func (m *MockStorageService) GetHotelForUpdate(tx *sql.Tx, hotelId int64) (store.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelForUpdate", tx, hotelId)
	ret0, _ := ret[0].(store.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelForUpdate indicates an expected call of GetHotelForUpdate.
func (mr *MockStorageServiceMockRecorder) GetHotelForUpdate(tx, hotelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelForUpdate", reflect.TypeOf((*MockStorageService)(nil).GetHotelForUpdate), tx, hotelId)
}

// GetHotels mocks base method.
func (m *MockStorageService) GetHotels(getHotelsListReq *hotelsystem.GetHotelsListRequest) ([]store.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotels", getHotelsListReq)
	ret0, _ := ret[0].([]store.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotels indicates an expected call of GetHotels.
func (mr *MockStorageServiceMockRecorder) GetHotels(getHotelsListReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotels", reflect.TypeOf((*MockStorageService)(nil).GetHotels), getHotelsListReq)
}

// GetIdempotentPayloadByKey mocks base method.
func (m *MockStorageService) GetIdempotentPayloadByKey(key string) (*store.IdempotencyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdempotentPayloadByKey", key)
	ret0, _ := ret[0].(*store.IdempotencyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdempotentPayloadByKey indicates an expected call of GetIdempotentPayloadByKey.
func (mr *MockStorageServiceMockRecorder) GetIdempotentPayloadByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdempotentPayloadByKey", reflect.TypeOf((*MockStorageService)(nil).GetIdempotentPayloadByKey), key)
}

// GetPaymentByBookingId mocks base method.
func (m *MockStorageService) GetPaymentByBookingId(bookingId int64) (*store.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByBookingId", bookingId)
	ret0, _ := ret[0].(*store.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByBookingId indicates an expected call of GetPaymentByBookingId.
func (mr *MockStorageServiceMockRecorder) GetPaymentByBookingId(bookingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByBookingId", reflect.TypeOf((*MockStorageService)(nil).GetPaymentByBookingId), bookingId)
}

// GetPaymentByCheckoutSessionId mocks base method.
func (m *MockStorageService) GetPaymentByCheckoutSessionId(checkoutSessionId string) (*store.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByCheckoutSessionId", checkoutSessionId)
	ret0, _ := ret[0].(*store.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByCheckoutSessionId indicates an expected call of GetPaymentByCheckoutSessionId.
func (mr *MockStorageServiceMockRecorder) GetPaymentByCheckoutSessionId(checkoutSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByCheckoutSessionId", reflect.TypeOf((*MockStorageService)(nil).GetPaymentByCheckoutSessionId), checkoutSessionId)
}

// GetPaymentByCheckoutSessionIdTx mocks base method.
func (m *MockStorageService) GetPaymentByCheckoutSessionIdTx(tx *sql.Tx, checkoutSessionId string) (*store.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByCheckoutSessionIdTx", tx, checkoutSessionId)
	ret0, _ := ret[0].(*store.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByCheckoutSessionIdTx indicates an expected call of GetPaymentByCheckoutSessionIdTx.
func (mr *MockStorageServiceMockRecorder) GetPaymentByCheckoutSessionIdTx(tx, checkoutSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByCheckoutSessionIdTx", reflect.TypeOf((*MockStorageService)(nil).GetPaymentByCheckoutSessionIdTx), tx, checkoutSessionId)
}

// GetUserById mocks base method.
func (m *MockStorageService) GetUserById(id int) (store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStorageServiceMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStorageService)(nil).GetUserById), id)
}

// GetUserByUsername mocks base method.
func (m *MockStorageService) GetUserByUsername(username string) (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStorageServiceMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStorageService)(nil).GetUserByUsername), username)
}

// IncrementHotelRoomsTx mocks base method.
func (m *MockStorageService) IncrementHotelRoomsTx(tx *sql.Tx, hotelId int64, numRooms int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementHotelRoomsTx", tx, hotelId, numRooms)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementHotelRoomsTx indicates an expected call of IncrementHotelRoomsTx.
func (mr *MockStorageServiceMockRecorder) IncrementHotelRoomsTx(tx, hotelId, numRooms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementHotelRoomsTx", reflect.TypeOf((*MockStorageService)(nil).IncrementHotelRoomsTx), tx, hotelId, numRooms)
}

// UpdateBookingStatus mocks base method.
func (m *MockStorageService) UpdateBookingStatus(bookingId int64, status store.BookingStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookingStatus", bookingId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookingStatus indicates an expected call of UpdateBookingStatus.
func (mr *MockStorageServiceMockRecorder) UpdateBookingStatus(bookingId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookingStatus", reflect.TypeOf((*MockStorageService)(nil).UpdateBookingStatus), bookingId, status)
}

// UpdateBookingStatusTx mocks base method.
func (m *MockStorageService) UpdateBookingStatusTx(tx *sql.Tx, bookingId int64, status store.BookingStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookingStatusTx", tx, bookingId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookingStatusTx indicates an expected call of UpdateBookingStatusTx.
func (mr *MockStorageServiceMockRecorder) UpdateBookingStatusTx(tx, bookingId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookingStatusTx", reflect.TypeOf((*MockStorageService)(nil).UpdateBookingStatusTx), tx, bookingId, status)
}

// UpdateHotelRooms mocks base method.
func (m *MockStorageService) UpdateHotelRooms(hotelId int64, newRoomCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotelRooms", hotelId, newRoomCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHotelRooms indicates an expected call of UpdateHotelRooms.
func (mr *MockStorageServiceMockRecorder) UpdateHotelRooms(hotelId, newRoomCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotelRooms", reflect.TypeOf((*MockStorageService)(nil).UpdateHotelRooms), hotelId, newRoomCount)
}

// UpdateHotelRoomsTx mocks base method.
func (m *MockStorageService) UpdateHotelRoomsTx(tx *sql.Tx, hotelId int64, newRoomCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotelRoomsTx", tx, hotelId, newRoomCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHotelRoomsTx indicates an expected call of UpdateHotelRoomsTx.
func (mr *MockStorageServiceMockRecorder) UpdateHotelRoomsTx(tx, hotelId, newRoomCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotelRoomsTx", reflect.TypeOf((*MockStorageService)(nil).UpdateHotelRoomsTx), tx, hotelId, newRoomCount)
}

// UpdatePaymentStatus mocks base method.
func (m *MockStorageService) UpdatePaymentStatus(paymentId int, status constants.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", paymentId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockStorageServiceMockRecorder) UpdatePaymentStatus(paymentId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockStorageService)(nil).UpdatePaymentStatus), paymentId, status)
}

// UpdatePaymentStatusTx mocks base method.
func (m *MockStorageService) UpdatePaymentStatusTx(tx *sql.Tx, paymentId int, status constants.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatusTx", tx, paymentId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentStatusTx indicates an expected call of UpdatePaymentStatusTx.
func (mr *MockStorageServiceMockRecorder) UpdatePaymentStatusTx(tx, paymentId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatusTx", reflect.TypeOf((*MockStorageService)(nil).UpdatePaymentStatusTx), tx, paymentId, status)
}
